name: CI/CD

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  GITHUB_CONTAINER_REGISTRY: ghcr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    - run: |
        cd frontend
        npm install
        npm run build --if-present
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
        cd backend
        mvn -B package -DskipTests --file pom.xml
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
          registry: ${{ env.GITHUB_CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
          images: ${{ env.GITHUB_CONTAINER_REGISTRY }}/${{ github.repository }}/todo-app
          tags: |
            #type=semver,pattern={{version}}
            type=ref,event=pr
            type=sha
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v6
      with:
        context: .
        build-args: |
            JAR_FILE=backend/target/*.jar
            STATIC_DIST=frontend/dist/
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Write image version to .env.override
      run: |
        VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        echo "TODO_APP_IMAGE_TAG=${VERSION}" >> .deployment/.env.override
    - name: Deploy to server via SSH
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ vars.REMOTE_HOST }}
        REMOTE_USER: ${{ vars.REMOTE_USER }}
        SOURCE: ".deployment/"
        TARGET: "~/${{ github.repository }}/"
        SCRIPT_BEFORE: |
          mkdir -p ~/${{ github.repository }}/
        SCRIPT_AFTER: |
          cd ~/${{ github.repository }}/
          touch .env && awk -F= '!a[$1]++' .env.override .env > .env.merged && mv .env.merged .env
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker compose -f docker-compose.prod.yml up -Vd